# -*- coding: utf-8 -*-
"""buscavet2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y7AwId9CAyluYlguXOpD5WtwZuyhVY3F
"""

# Commented out IPython magic to ensure Python compatibility.
from IPython import get_ipython
from IPython.display import display, Markdown
# %%
from IPython import get_ipython
from IPython.display import display
# %%
# %pip -q install google-genai google-adk googlemaps
# %%
# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura a API Key do Google Maps
# Certifique-se de ter uma chave de API do Google Maps armazenada em secrets com o nome 'GOOGLE_MAPS_API_KEY'
try:
  os.environ["GOOGLE_MAPS_API_KEY"] = userdata.get('GOOGLE_MAPS_API_KEY')
except userdata.SecretNotFoundError:
  print("ATEN√á√ÉO: Chave GOOGLE_MAPS_API_KEY n√£o encontrada nos secrets do Colab.")
  print("Por favor, adicione sua chave de API do Google Maps aos secrets com o nome 'GOOGLE_MAPS_API_KEY'.")

# %%
# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"
# %%
# Instalar Framework de agentes do Google ################################################
# J√° instalado no passo anterior
# %%
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
import textwrap # Para formatar melhor a sa√≠da de texto
import requests # Para fazer requisi√ß√µes HTTP
import warnings
import googlemaps # Importa a biblioteca googlemaps

warnings.filterwarnings("ignore")
# %%
# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response
# %%
# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))
# %%
#######################################################
# --- Agente 1: Buscador de Cl√≠nicas Veterin√°rias --- #
#######################################################
def agente_buscador_veterinarias(cep):
    buscador_veterinarias = Agent(
        name="agente_buscador_veterinarias",
        model="gemini-2.0-flash",
        instruction=f"""
        Voc√™ √© um assistente de pesquisa. Sua tarefa √© usar a ferramenta de busca do google (google_search)
        para encontrar cl√≠nicas veterin√°rias que funcionam 24 horas perto do CEP {cep}.
        Liste as cl√≠nicas encontradas com seus nomes, endere√ßos e, se poss√≠vel, telefones.
        Priorize resultados que explicitamente mencionem atendimento 24 horas.
        Forne√ßa o m√°ximo de detalhes de endere√ßo poss√≠vel para ajudar na gera√ß√£o do link do mapa.
        """,
        description="Agente que busca cl√≠nicas veterin√°rias 24 horas no Google",
        tools=[google_search]
    )

    entrada_do_agente_buscador = f"Cl√≠nicas veterin√°rias 24 horas perto do CEP {cep}"

    clinicas_encontradas = call_agent(buscador_veterinarias, entrada_do_agente_buscador)
    return clinicas_encontradas
# %%
#####################################################
# --- Agente 2: Formatador de Resultados com Mapa --- #
#####################################################
def agente_formatador_resultados_mapa(clinicas_encontradas):
    formatador = Agent(
        name="agente_formatador_resultados_mapa",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um formatador de texto. Recebeu uma lista de cl√≠nicas veterin√°rias com seus detalhes (nome, endere√ßo, telefone).
        Sua tarefa √© formatar essas informa√ß√µes de maneira clara e concisa, listando cada cl√≠nica
        e seus detalhes em t√≥picos, f√°cil de ler para o usu√°rio.
        Para cada cl√≠nica com endere√ßo dispon√≠vel, tente gerar um link para o Google Maps.
        Se n√£o encontrou nenhuma cl√≠nica, informe isso ao usu√°rio.
        """,
        description="Agente que formata os resultados da busca por cl√≠nicas veterin√°rias e adiciona links para o Google Maps.",
    )

    entrada_do_agente_formatador = f"Lista de cl√≠nicas veterin√°rias encontradas:\n{clinicas_encontradas}\n\nPara cada cl√≠nica com endere√ßo, por favor, gere um link para o Google Maps."

    resultados_formatados = call_agent(formatador, entrada_do_agente_formatador)

    # Adicionar a l√≥gica para gerar links do Google Maps aqui
    # Isso pode ser feito iterando sobre os resultados formatados e usando a biblioteca googlemaps
    # No entanto, o agente formatador j√° est√° instru√≠do a tentar gerar os links,
    # dependendo da sua capacidade de processar e interagir com essa informa√ß√£o.
    # Uma abordagem mais robusta seria processar a sa√≠da do agente e usar a API do Google Maps
    # no c√≥digo Python principal para gerar os links. Vamos implementar essa abordagem.

    return resultados_formatados

# %%
# Fun√ß√£o para gerar link do Google Maps a partir de um endere√ßo
def generate_google_maps_link(address):
    if "GOOGLE_MAPS_API_KEY" not in os.environ:
      return "Chave de API do Google Maps n√£o configurada."

    try:
      gmaps = googlemaps.Client(key=os.environ["GOOGLE_MAPS_API_KEY"])
      geocode_result = gmaps.geocode(address)

      if geocode_result:
        latitude = geocode_result[0]['geometry']['location']['lat']
        longitude = geocode_result[0]['geometry']['location']['lng']
        return f"[Ver no Google Maps](https://www.google.com/maps?q={latitude},{longitude})"
      else:
        return "Endere√ßo n√£o encontrado para gerar o link do mapa."
    except Exception as e:
      return f"Erro ao gerar link do mapa: {e}"


# %%
print("üêæ Iniciando o Sistema de Busca por Cl√≠nicas Veterin√°rias 24 Horas üêæ")

# --- Obter o CEP do Usu√°rio ---
cep_usuario = input("‚ùì Por favor, digite o CEP da regi√£o onde voc√™ deseja buscar cl√≠nicas veterin√°rias 24 horas: ")

# Inserir l√≥gica do sistema de agentes ################################################
if not cep_usuario:
    print("Voc√™ esqueceu de digitar o CEP!")
else:
    print(f"Maravilha! Buscando cl√≠nicas veterin√°rias 24 horas perto do CEP {cep_usuario}...")

    clinicas_encontradas = agente_buscador_veterinarias(cep_usuario)
    # print("\n--- üìù Resultado da Busca (Agente 1) ---\n")
    # display(to_markdown(clinicas_encontradas))
    # print("--------------------------------------------------------------")

    # O agente formatador agora tenta incluir informa√ß√µes para gerar links
    resultados_formatados_agente = agente_formatador_resultados_mapa(clinicas_encontradas)

    # Processar a sa√≠da do agente formatador para adicionar links do Google Maps
    linhas_resultados = resultados_formatados_agente.split('\n')
    resultados_finais_com_mapa = []

    current_clinic_info = []
    for linha in linhas_resultados:
        current_clinic_info.append(linha)
        if "Endere√ßo:" in linha:
            address_parts = linha.split("Endere√ßo:")
            if len(address_parts) > 1:
                address = address_parts[1].strip()
                map_link = generate_google_maps_link(address)
                current_clinic_info.append(f"{map_link}\n") # Adiciona o link do mapa
        elif not linha.strip() and current_clinic_info:
            # Fim das informa√ß√µes de uma cl√≠nica, adicione tudo aos resultados finais
            resultados_finais_com_mapa.extend(current_clinic_info)
            current_clinic_info = []

    # Adicionar quaisquer informa√ß√µes restantes (√∫ltima cl√≠nica)
    if current_clinic_info:
        resultados_finais_com_mapa.extend(current_clinic_info)


    print("\nüìù Cl√≠nicas Veterin√°rias 24 Horas Encontradas PERTO DE VOC√ä\n")
    display(to_markdown("\n".join(resultados_finais_com_mapa)))
    print("--------------------------------------------------------------")